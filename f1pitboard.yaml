esphome:
  name: "f1pitboard"
  on_boot:
      priority: 200.0
      then:
        - component.update: eink_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
              # Wait a bit longer so all the items are received
        - delay: 5s
        - logger.log: "Initial sensor data received: Refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen_f1pitboard

esp32:
  board: esp32dev
  framework:
    type: arduino

#external_components:
#  - source:
#      type: git
#      url: https://github.com/prapador/esphome_waveshare_fix
#      ref: dev
#    components: [ waveshare_epaper ]

# Enable logging
logger:

# Enable Home Assistant API
api:
ota:
  - platform: esphome


# Creates buttons in Home Assistant to
button:
  - platform: shutdown
    name: "F1 Pit Board - Shutdown"
  - platform: restart
    name: "F1 Pit Board - Restart"
  - platform: template
    name: "F1 Pit Board - Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen_f1pitboard
      
      
# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'


# Script for updating screen - Refresh display and publish refresh count and time. (Thanks @paviro!)
script:
  - id: update_screen_f1pitboard
    then:
      - lambda: 'id(data_updated) = false;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'
      

# Check whether the display needs to be refreshed every minute,
# based on whether new data is received or motion is detected. (Thanks @paviro!)
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                lambda: 'return id(data_updated) == true;'
              then:
                - if:
                    condition:
                      binary_sensor.is_on: motion_detected
                    then:
                      - logger.log: "Sensor data updated and activity in home detected: Refreshing display..."
                      - script.execute: update_screen_f1pitboard
                    else:
                      - logger.log: "Sensor data updated but no activity in home - skipping display refresh."
              else:
                - logger.log: "No sensors updated - skipping display refresh."


# Wifi information
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.20.175

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret wifi_ssid
    password: !secret wifi_password


# Include custom fonts
font:
#  - file: 'fonts/TitilliumWeb-Regular.ttf'
  - file: 'fonts/GothamRnd-Book.ttf'    
    id: font_small_book
    size: 18
    glyphs: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Å', 'Ä', 'Ö', 'a', 'b', 'c', 'd', 'e', 'é', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', '-', ' ', '°', '.', ',', 'ó', 'í', 'ã']
#  - file: 'fonts/TitilliumWeb-Bold.ttf'
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_title
    size: 108
    glyphs: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Å', 'Ä', 'Ö', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', '-', ' ', '°', '.', ',', 'ó', 'í', 'ã', 'é']
#  - file: 'fonts/TitilliumWeb-Bold.ttf'
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_title_small
    size: 30
    glyphs: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Å', 'Ä', 'Ö', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', '-', ' ', '°', '.', ',', 'ó', 'í', 'ã', 'é']
#  - file: 'fonts/TitilliumWeb-Bold.ttf'
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_medium_bold
    size: 24
    glyphs: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Å', 'Ä', 'Ö', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', '-', ' ', '°', '.', ',', 'ó', 'í', 'ã', 'é']
#  - file: 'fonts/TitilliumWeb-Bold.ttf'
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_small_bold
    size: 18
    glyphs: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Å', 'Ä', 'Ö', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', '-', ' ', '°', '.', ',', 'ó', 'í', 'ã', 'é']
#  - file: 'fonts/TitilliumWeb-Bold.ttf'
  - file: 'fonts/GothamRnd-Bold.ttf'    
    id: font_title_bold
    size: 54
    glyphs: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Å', 'Ä', 'Ö', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', '-', ' ', '°', '.', ',', 'ó', 'í', 'ã', 'é']

  # Include Material Design Icons font
  # Thanks to https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 96
    glyphs: &mdi-weather-glyphs
      - "\U000F0F29" # mdi snowflake-alert
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medlarge
    size: 18
    glyphs:
      - "\U000F05A9" # mdi-wifi
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 36
    glyphs: *mdi-weather-glyphs


# Check if motion is detected in the living room.
binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.f1_pit_board_motion_detected
    id: motion_detected


# Include Images

image:
  - file: "images/f1.png"
    id: image_f1
    type: RGB565
    transparency: alpha_channel
    

sensor:
  - platform: template
    name: "F1 Pit Board - Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: "F1 Pit Board - Recorded Display Refresh"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  

## WiFi signl from ESP32 service
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s 


# Call information from HA
text_sensor:

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_day_days_countdown
    id: next_race_day_days_countdown
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_GP
    id: next_race_GP
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_day_and_time
    id: next_race_day_and_time
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_circuit
    id: next_race_circuit
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_location
    id: next_race_location
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_quali_and_time
    id: next_race_quali_and_time
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_fp1_and_time
    id: next_race_fp1_and_time
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_fp2_and_time
    id: next_race_fp2_and_time
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
        
  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_fp3_and_time
    id: next_race_fp3_and_time
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_sprint_quali_and_time
    id: next_race_sprint_quali_and_time
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: next_race_sprint_and_time
    id: next_race_sprint_and_time
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: race_schedule_plus1
    id: race_schedule_plus1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: race_schedule_plus2
    id: race_schedule_plus2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.f1_data_race
    attribute: race_schedule_plus3
    id: race_schedule_plus3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'



# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14


# Now render everything on the ePaper screen.
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2
    update_interval: never
    rotation: 90°
    lambda: |-

      //# Print loading screen before data is received.
      if (id(initial_data_received) == false) {
        it.printf(240, 350, id(font_small_bold), TextAlign::TOP_CENTER, "LIGHTS OUT AND AWAY WE GO");
        it.image(150, 200, id(image_f1));
      } else {


        it.image(60, 140, id(image_f1));
        
        it.printf(320, 100, id(font_title), TextAlign::TOP_CENTER, "%s", id(next_race_day_days_countdown).state.c_str());
        it.printf(260, 200, id(font_medium_bold), TextAlign::TOP_LEFT, "dagar till");

        it.printf(50, 250, id(font_title_small), TextAlign::TOP_LEFT, "%s", id(next_race_GP).state.c_str());

        it.printf(50, 290, id(font_medium_bold), TextAlign::TOP_LEFT, "%s", id(next_race_day_and_time).state.c_str());
        
        it.printf(50, 330, id(font_small_bold), TextAlign::TOP_LEFT, "%s", id(next_race_circuit).state.c_str());
        it.printf(50, 355, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(next_race_location).state.c_str());

        if (atoi(id(next_race_day_days_countdown).state.c_str()) < 4) {

          // Kval och FP1 visas alltid när racet är nära
          it.printf(50, 400, id(font_small_bold), TextAlign::TOP_LEFT, "%s", id(next_race_quali_and_time).state.c_str());
          it.printf(50, 430, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(next_race_fp1_and_time).state.c_str());

          // Om det INTE är sprinthelg (båda sprint-fälten är tomma)
          if (
            id(next_race_sprint_quali_and_time).state == "" &&
            id(next_race_sprint_and_time).state == ""
          ) {
            it.printf(50, 460, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(next_race_fp2_and_time).state.c_str());
            it.printf(50, 490, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(next_race_fp3_and_time).state.c_str());
          }

          // Om det ÄR sprinthelg (båda sprint-fälten har innehåll)
          else if (
            id(next_race_sprint_quali_and_time).state != "" &&
            id(next_race_sprint_and_time).state != ""
          ) {
            it.printf(50, 460, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(next_race_sprint_quali_and_time).state.c_str());
            it.printf(50, 490, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(next_race_sprint_and_time).state.c_str());
          }

        }


        it.rectangle(20, 535, 410, 1);                 
        
      
        it.printf(50, 560, id(font_small_bold), TextAlign::TOP_LEFT, "Kommande race:");
        it.printf(50, 585, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(race_schedule_plus1).state.c_str());
        it.printf(50, 610, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(race_schedule_plus2).state.c_str());
        it.printf(50, 635, id(font_small_book), TextAlign::TOP_LEFT, "%s", id(race_schedule_plus3).state.c_str());



 
      //# Print update timestamp
        // Refresh Timestamp
        // Code by EnsconcE from https://community.home-assistant.io/t/esphome-show-time/348903
        char str[17];
        time_t currTime = id(homeassistant_time).now().timestamp;
        strftime(str, sizeof(str), "%d %b %H:%M", localtime(&currTime));
        it.printf(210, 710, id(font_small_book), TextAlign::TOP_CENTER, "%s", str);
      }


captive_portal:
